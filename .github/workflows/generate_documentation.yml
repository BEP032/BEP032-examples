name: "Generate Doc and Publish"
on:
  push

jobs:
  docs:
    runs-on: ubuntu-latest
    defaults:
      # by default run in bash mode (required for conda usage)
      run:
        shell: bash -l {0}

    steps:
    #    - uses: actions/checkout@v3
    #    # Standard drop-in approach that should work for most people.

    - name: Get current year-month
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m')"

    # setup conda
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: doc_env
        clean-patched-environment-file: false

    - uses: actions/cache@v3
      # the cache for python package is reset:
      #   * every month
      #   * when requirements/requirements_testing change
      id: cache-conda-env
      with:
        path: /usr/share/miniconda/envs/doc_env
        key: ${{ runner.os }}-conda-env-${{ hashFiles('**/environment.yml') }}-${{ steps.date.outputs.date }}


    - name: Install dependencies for fetching repo
      run: |
        conda install --name doc_env -c conda-forge python git-annex datalad

    - name: Print conda packages
      run: |
        conda list

    - name: Configure git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"

    - name: Fetch repository from GIN (including git-annex content)
      run: |
        # TODO: remove dev branch specification later on
        datalad install --get-data --branch add/doc -s https://gin.g-node.org/sprenger/BEP032-examples
        # TODO: should be https://gin.g-node.org/NeuralEnsemble/BEP032-examples later on
        cd BEP032-examples

    - name: Get repo and file status
      run: |
        git status
        ls

    - name: Install dependencies for tutorials and documentation
      run: |
        conda env update --file tutorials/environment.yml
        conda env update --file docs/environment.yml

    #    - name: Lint with flake8
    #      run: |
    #        conda install flake8
    #        # stop the build if there are Python syntax errors or undefined names
    #        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - uses: ammaraskar/sphinx-action@master
      with:
        docs-folder: "docs/"
    # Example of using a custom build-command.
    #    - uses: ammaraskar/sphinx-action@master
    #      with:
    #        build-command: "sphinx-build -b html . _build"
    #        docs-folder: "docs/"
    # Great extra actions to compose with:
    # Create an artifact of the html output.
    - uses: actions/upload-artifact@v1
      with:
        name: DocumentationHTML
        path: docs/_build/html/
    # Publish built docs to gh-pages branch.
    # ===============================
    - name: Commit documentation changes
      run: |
        git checkout -bf gh-pages
        cp -r docs/_build/html/* gh-pages/
        cd gh-pages
        touch .nojekyll
        git add .
        git commit -m "Update documentation" -a || true
        # The above command will fail if no changes were present, so we ignore
        # that.
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        branch: gh-pages
        directory: gh-pages
        github_token: ${{ secrets.GITHUB_TOKEN }}
    # ===============================
