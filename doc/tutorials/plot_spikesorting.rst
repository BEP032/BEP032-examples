
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/plot_spikesorting.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_plot_spikesorting.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_plot_spikesorting.py:


Spikesorting with SpikeInterface
=================================

One of the most common processing steps for neuronal data is the identification
of spiking activity of individual neurons. [SpikeInterface](https://github.com/Spikeinterface/Spikeinterface)
is a python packages that provides a common interface to multiple different software tools designed
for this task. Here we demonstrate how to preprocess a BIDS-ephys compatible dataset using SpikeInterface
and visualize the result. This script is accessible at :download:`source Python script <plot_spikesorting.py>`.

.. GENERATED FROM PYTHON SOURCE LINES 13-14

First we import SpikeInterface and locate the dataset

.. GENERATED FROM PYTHON SOURCE LINES 14-20

.. code-block:: default
   :lineno-start: 15


    import matplotlib.pyplot as plt
    import spikeinterface.full as si

    session_folder = '../ephys_nix/sub-i/ses-140703/ephys'








.. GENERATED FROM PYTHON SOURCE LINES 21-24

SpikeInterface provides a convenience function for loading a BIDS-ephys compatible dataset.
This dataset contains multiple streams (data recorded at different sampling rates).
SpikeInterface represents each of those streams in a separate `recording` object.

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default
   :lineno-start: 25


    recordings = si.read_bids(session_folder)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    There is no SI units provided for probe Prob-8596-001139, a dummy SI unit (um) is created.
    /home/sprengerj/miniconda3/envs/BEP032-tutorials/lib/python3.10/site-packages/spikeinterface/core/baserecordingsnippets.py:132: UserWarning: The given probes have unconnected contacts: they are removed
      warn('The given probes have unconnected contacts: they are removed')
    There is no SI units provided for probe Prob-8596-001139, a dummy SI unit (um) is created.
    There is no SI units provided for probe Prob-8596-001139, a dummy SI unit (um) is created.




.. GENERATED FROM PYTHON SOURCE LINES 28-29

We select the most `raw` data stream by selecting the one with the highest temporal resolution, i.e. sampling frequency.

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: default
   :lineno-start: 29

    recording_raw = recordings[0]
    for rec in recordings[1:]:
        if rec.get_sampling_frequency() > recording_raw.get_sampling_frequency():
            recording_raw = rec








.. GENERATED FROM PYTHON SOURCE LINES 35-44

By default the software packages to be used for spike sorting needs to be installed locally to
perform the sorting. However, the installation of these specialized software tools can be
complicated and inconvenient due to specific system requirement. To simplify the usage of
different spike sorting packages SpikeInterface provides a set of containers with preinstalled
sorting packages. The list of available containers and their versions is available on
[DockerHub](<TODO: Add link here>).

Here we run the sorting package `ironclust` using the containerized version. To run the container we are using `singularity`, alternativly SpikeInterface also supports running contains
in `docker`.

.. GENERATED FROM PYTHON SOURCE LINES 44-52

.. code-block:: default
   :lineno-start: 45


    sorting = si.run_sorter_container(sorter_name='ironclust', recording=recording_raw,
                                      mode='singularity',
                                      container_image='spikeinterface/ironclust-compiled-base',
                                      output_folder='ironclust_output',
                                      with_output=True, fGpu=False)
    print(sorting)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Versions are not the same. This might lead to errors. Use  spikeinterface version 0.94.1.dev0
    MdaSortingExtractor: 3 units - 1 segments - 30.0kHz
      file_path: /home/sprengerj/repos/BEP032-examples/tutorials/ironclust_output/tmp/firings.mda




.. GENERATED FROM PYTHON SOURCE LINES 53-56

Automatic spike sorting always requires manual inspection the results to confirm the sorting
algorithm and the applied parameters were suited for the dataset. Here we visualize the extracted
spike times for each unit (neuron) in a raster plot.

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default
   :lineno-start: 57


    si.plot_rasters(sorting)

    plt.show()




.. image-sg:: /tutorials/images/sphx_glr_plot_spikesorting_001.png
   :alt: plot spikesorting
   :srcset: /tutorials/images/sphx_glr_plot_spikesorting_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-64

We can extract the waveforms on which the sorting is based. To align the waveforms we remove the
low frequency components before extracting the waveform snippets from the raw signal.

.. GENERATED FROM PYTHON SOURCE LINES 64-74

.. code-block:: default
   :lineno-start: 65


    recording_filtered = si.highpass_filter(recording_raw, freq_min=300.)  # frequencies are provided in Hz
    recording_filtered.annotate(is_filtered=True)

    waveforms = si.extract_waveforms(recording_filtered, sorting, './ironclust_waveform_output',
                                     overwrite=True, ms_before=1, ms_after=2.)

    si.plot_unit_waveforms(waveforms)

    plt.show()



.. image-sg:: /tutorials/images/sphx_glr_plot_spikesorting_002.png
   :alt: template 0, template 1, template 2
   :srcset: /tutorials/images/sphx_glr_plot_spikesorting_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.064 seconds)

**Estimated memory usage:**  200 MB


.. _sphx_glr_download_tutorials_plot_spikesorting.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/juliasprenger/BEP032-doc/add/doc?filepath=/notebooks/tutorials/plot_spikesorting.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_spikesorting.py <plot_spikesorting.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_spikesorting.ipynb <plot_spikesorting.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
